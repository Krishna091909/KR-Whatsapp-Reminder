import os
import pandas as pd
import datetime
import requests
import time
from flask import Flask
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# üìå Load from environment or variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ULTRA_INSTANCE_ID = os.getenv("ULTRA_INSTANCE_ID")
ULTRA_TOKEN = os.getenv("ULTRA_TOKEN")
RENDER_URL = os.getenv("RENDER_URL")
VERITAS_LINK = os.getenv("VERITAS_LINK")

# üîê Only allow access to this Telegram user ID
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))  # Replace with your user ID or load from env

# üìÅ Save Excel File
SAVE_PATH = "loan_data.xlsx"

# üîó UltraMsg API Endpoint
ULTRA_API_URL = f"https://api.ultramsg.com/{ULTRA_INSTANCE_ID}/messages/chat"

# ‚úÖ WhatsApp Sender
def send_whatsapp_message(phone, message):
    payload = {
        "token": ULTRA_TOKEN,
        "to": f"+91{int(phone)}",
        "body": message
    }
    try:
        response = requests.post(ULTRA_API_URL, data=payload)
        print(f"Sent to {phone}: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Failed to send to {phone}: {e}")

# üìä Process Excel
def process_excel(file_path):
    df = pd.read_excel(file_path)
    for index, row in df.iterrows():
        loan_no = row['LOAN NUMBER']
        name = row['CUSTOMER NAME']
        phone = row['MOBILE NO']
        edi = row['EDI AMOUNT']
        overdue = row['OVER DUE']
        advance = row['ADVANCE']

        payable = edi + overdue - advance

        if payable <= 0:
            continue

        # üì¢ Custom Message Format in Telugu with Loan Number and Amount
        msg = (
            f"üëã ‡∞™‡±ç‡∞∞‡∞ø‡∞Ø‡∞Æ‡±à‡∞® {name} ‡∞ó‡∞æ‡∞∞‡±Å,\n\n"
            f"‡∞Æ‡±Ä Veritas Finance ‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® {loan_no} ‡∞≤‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±Å‡∞ï‡±Å ‡∞™‡±Ü‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞Æ‡±å‡∞Ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å:\n\n"
            f"üí∏ ‡∞Ö‡∞°‡±ç‡∞µ‡∞æ‡∞®‡±ç‡∞∏‡±ç ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç: ‚Çπ{advance}\n"
            f"üìå ‡∞à‡∞°‡±Ä ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç: ‚Çπ{edi}\n"
            f"üî¥ ‡∞ì‡∞µ‡∞∞‡±ç‚Äå‡∞°‡±ç‡∞Ø‡±Ç ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç: ‚Çπ{overdue}\n"
            f"‚úÖ ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞µ‡∞≤‡∞∏‡∞ø‡∞® ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç: ‚Çπ{payable}\n\n"
            f"‚ö†Ô∏è ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á ‡∞™‡±Ü‡∞®‡∞æ‡∞≤‡±ç‡∞ü‡±Ä‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å CIBIL ‡∞∏‡±ç‡∞ï‡±ã‡∞∞‡±ç‚Äå‡∞™‡±à ‡∞™‡±ç‡∞∞‡∞≠‡∞æ‡∞µ‡∞Ç ‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.\n"
            f"üîó ‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç: {VERITAS_LINK}"
        )

        send_whatsapp_message(phone, msg)
        time.sleep(2)  # Add delay between messages

# üì© Handle Telegram Files
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("üö´ Access Denied. This bot is restricted.")
        return

    document = update.message.document
    if document and document.file_name.endswith(('.xlsx', '.xls')):
        file = await context.bot.get_file(document.file_id)
        await file.download_to_drive(SAVE_PATH)
        await update.message.reply_text("üìÅ File received. Sending WhatsApp messages...")

        process_excel(SAVE_PATH)
        await update.message.reply_text("‚úÖ All WhatsApp messages have been sent.")
    else:
        await update.message.reply_text("‚ö†Ô∏è Please send an Excel file (.xlsx or .xls).")

# üéõ Start Command with Buttons
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("üö´ Access Denied. This bot is restricted.")
        return

    keyboard = [[
        InlineKeyboardButton("üìÑ WhatsApp Reminder", callback_data="upload"),
        InlineKeyboardButton("ü§ñ About the Bot", callback_data="about")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "I am your WhatsApp Reminder Bot. Please choose an option below:",
        reply_markup=reply_markup
    )

# üîò Handle Button Presses
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.from_user.id != ALLOWED_USER_ID:
        await query.answer()
        await query.edit_message_text("üö´ Access Denied. This bot is restricted.")
        return

    await query.answer()

    if query.data == "upload":
        await query.edit_message_text("üìÅ Please upload your Excel (.xlsx) file.")
    elif query.data == "about":
        await query.edit_message_text(
            "ü§ñ This bot was developed By @ItsKing000. It sends WhatsApp reminder messages to customers based on data from an Excel file."
        )

# üåê Flask Web Server to Keep Render Alive
web_app = Flask('')

@web_app.route('/')
def home():
    return "Bot is alive!"

def run_flask():
    web_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    while True:
        try:
            response = requests.get(RENDER_URL)
            print(f"Keep-alive ping sent! Status: {response.status_code}")
        except Exception as e:
            print(f"Keep-alive request failed: {e}")
        time.sleep(49)  # Ping every 49 seconds

# ‚ñ∂Ô∏è Run Bot
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    threading.Thread(target=keep_alive).start()

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))

    print("üöÄ Telegram WhatsApp Bot Running...")
    app.run_polling()
